%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% Computes the position at the end of phase C.                                 %
%                                                                              %
% Inputs                                                                       %
%   aB   : acceleration during phase B    : [1,1]                              %
%   tB   : duration of phase B            : [1,1]                              %
%   x0   : initial postion                : [1,1]                              %
%   v0   : initial velocity               : [1,1]                              %
%   a0   : initial acceleration           : [1,1]                              %
%   jmax : maximum jerk                   : [1,1]                              %
%   smax : maximum snap                   : [1,1]                              %
%                                                                              %
% Output                                                                       %
%   xC   : velocity at the end of phase C : [1,1]                              %
%                                                                              %
% Author: Alexandre Boeuf: alex.boeuf[at]gmail.com                             %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function xC=x_c(aB,tB,x0,v0,a0,jmax,smax)
   [tA1,tA2,tC1,tC2,sA,sC]=durations_and_signs_ac(aB,a0,jmax,smax);
   xC=(7*sA*smax*tA1^4)/12+(7*sA*smax*tA1^3*tA2)/6+sA*smax*tA1^3*tB          ...
     +2*sA*smax*tA1^3*tC1+sA*smax*tA1^3*tC2+(3*sA*smax*tA1^2*tA2^2)/4        ...
     +(3*sA*smax*tA1^2*tA2*tB)/2+3*sA*smax*tA1^2*tA2*tC1                     ...
     +(3*sA*smax*tA1^2*tA2*tC2)/2+(sA*smax*tA1^2*tB^2)/2                     ...
     +2*sA*smax*tA1^2*tB*tC1+sA*smax*tA1^2*tB*tC2+2*sA*smax*tA1^2*tC1^2      ...
     +2*sA*smax*tA1^2*tC1*tC2+(sA*smax*tA1^2*tC2^2)/2+2*a0*tA1^2             ...
     +(sA*smax*tA1*tA2^3)/6+(sA*smax*tA1*tA2^2*tB)/2+sA*smax*tA1*tA2^2*tC1   ...
     +(sA*smax*tA1*tA2^2*tC2)/2+(sA*smax*tA1*tA2*tB^2)/2                     ...
     +2*sA*smax*tA1*tA2*tB*tC1+sA*smax*tA1*tA2*tB*tC2                        ...
     +2*sA*smax*tA1*tA2*tC1^2+2*sA*smax*tA1*tA2*tC1*tC2                      ...
     +(sA*smax*tA1*tA2*tC2^2)/2+2*a0*tA1*tA2+2*a0*tA1*tB+4*a0*tA1*tC1        ...
     +2*a0*tA1*tC2+2*v0*tA1+(a0*tA2^2)/2+a0*tA2*tB+2*a0*tA2*tC1+a0*tA2*tC2   ...
     +v0*tA2+(a0*tB^2)/2+2*a0*tB*tC1+a0*tB*tC2+v0*tB+(7*sC*smax*tC1^4)/12    ...
     +(7*sC*smax*tC1^3*tC2)/6+(3*sC*smax*tC1^2*tC2^2)/4+2*a0*tC1^2           ...
     +(sC*smax*tC1*tC2^3)/6+2*a0*tC1*tC2+2*v0*tC1+(a0*tC2^2)/2+v0*tC2+x0;
return
